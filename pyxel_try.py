# -*- coding: utf-8 -*-
"""pyxel_try.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zcq0wOl3SS9zbFWDfJ1F58SIbg7qoHyp
"""

!pip install pyxel

import pyxel
import numpy as np
import random

class Connect4Game:
    def __init__(self, system):
        self.width = 7
        self.height = 6
        self.board = np.zeros((self.height, self.width), dtype=int)
        self.current_player = 1
        self.system = system
        self.selected_column = None

        pyxel.init(self.width * 40, (self.height + 1) * 40)
        pyxel.mouse(True)  # マウスを有効にする
        pyxel.run(self.update, self.draw)

    def update(self):
        if self.current_player == 2:
            # AIの手番
            if not self.is_game_over():
                action = self.get_ai_move()
                self.make_move(action)
        elif pyxel.btnp(pyxel.MOUSE_LEFT_BUTTON):
            # マウスの左ボタンがクリックされた場合
            self.handle_mouse_click()
        # キーボード入力に対応するボタンの処理を追加

    def draw(self):
        pyxel.cls(0)
        self.draw_board()
        self.draw_buttons()

    def draw_board(self):
        for y in range(self.height):
            for x in range(self.width):
                cell_value = self.board[y, x]
                if cell_value == 1:
                    pyxel.circb(x * 40 + 20, y * 40 + 20, 15, 8)
                elif cell_value == -1:
                    pyxel.circb(x * 40 + 20, y * 40 + 20, 15, 7)

    def draw_buttons(self):
        for x in range(self.width):
            pyxel.rect(x * 40, self.height * 40, 40, 40, 15)
            pyxel.text(x * 40 + 17, self.height * 40 + 17, str(x), 0)

    def handle_mouse_click(self):
        # マウスのクリック座標をセルに変換
        column = pyxel.mouse_x // 40
        if 0 <= column < self.width and self.selected_column is None:
            self.selected_column = column

    def make_move(self, column):
        if not self.is_game_over() and self.is_valid_move(column):
            for y in range(self.height - 1, -1, -1):
                if self.board[y, column] == 0:
                    self.board[y, column] = self.current_player
                    if not self.is_game_over():
                        self.current_player = 3 - self.current_player  # プレイヤー切り替え
            self.selected_column = None

    def is_valid_move(self, column):
        return self.board[0, column] == 0

    def is_game_over(self):
        # ゲームが終了したかどうかの判定ロジックを実装
        pass

    def get_ai_move(self):
        # AIの手を決定するロジックを実装
        return 0

class System:
    def __init__(self):
        # AIの初期化と設定
        pass

    def get_ai_move(self, board, player):
        # AIの手を決定するロジックを実装
        pass

if __name__ == "__main__":
    system = System()
    game = Connect4Game(system)